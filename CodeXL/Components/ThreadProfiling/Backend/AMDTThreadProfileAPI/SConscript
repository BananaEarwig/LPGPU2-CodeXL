# -*- Python -*-

Import('*')
from CXL_init import *

libName = "CXLThreadProfileAPI"

env = CXL_env.Clone()

# compiler_base_flags = env['CPPFLAGS']
# compiler_base_flags = '-D_LINUX -DLINUX -Wall -Werror -Wextra -g -fmessage-length=0 -Wno-unknown-pragmas -std=c++11 -DGDT_BUILD_SUFFIX='


env.Append( CPPPATH = [ 
    "inc",
    "src",
    "src/Linux",
    env['CXL_commonproj_dir'],
    env['CXL_commonproj_dir']+"/AMDTCommonHeaders",
    env['CXL_commonproj_dir']+"/../CommonProjects",
    env['CXL_common_dir'] + '/../CodeXL/Components/CpuProfiling/Backend',
])


env.Append (LIBS = [
    "CXLExecutableFormat",
    "CXLCpuProfilingRawData",
    "CXLCpuProfilingControl",
    "CXLBaseTools",
    "CXLOSWrappers",
])

sources = \
[
    "src/tpCollect.cpp",
    "src/Linux/tpCollectImpl.cpp",
    "src/tpTranslate.cpp",
    "src/Linux/tpPerfTranslate.cpp",
    "src/AMDTThreadProfileAPI.cpp",
]


# Creating object files	
objFiles = env.SharedObject(sources)

# Creating shared libraries
soFiles = env.SharedLibrary(
    target = libName, 
    source = objFiles)

# Installing libraries
libInstall = env.Install( 
    dir = env['CXL_lib_dir'], 
    source = (soFiles))

Return('libInstall')
