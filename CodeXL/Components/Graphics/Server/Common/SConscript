#
# Main scons build file for GraphicsServerCommon
#
from CXL_init import *

Import('*')
env = CXL_env.Clone()

libName = "CXLGraphicsServerCommon"

initGPSBackend (env)
UseTinyXml (env)
UseGPUPerfAPI (env)
UseBoost (env)
initjpglib (env)

env.Append(CPPPATH = [
    env['CXL_commonproj_dir'] + '/../../CodeXL/Components/Graphics',
    env['CXL_commonproj_dir'] + '/../../CodeXL/Components/Graphics/Server/Common',
    env['CXL_commonproj_dir'] + '/../../CodeXL/Components/Graphics/Server/Common/Linux',
    env['CXL_commonproj_dir'] + '/../../CodeXL/Components/Graphics/Server/Common/Tracing',
    env['CXL_commonproj_dir'] + '/GPUPerfAPIUtils',
    env['CXL_commonproj_dir'],
    ])

# build the Common Server static library

sources = \
[
    # Files needed for GPA
    "../../../Common/Src/GPUPerfAPIUtils/GPUPerfAPILoader.cpp",
    "../../../Common/Src/GPUPerfAPIUtils/GPUPerfAPIUtil.cpp",

    "BufferDelta.cpp",
    "Capture.cpp",
    "CaptureLayer.cpp",
    "CaptureStream.cpp",
    "CommandProcessor.cpp",
    "CommandTimingManager.cpp",
    "CommandVisitor.cpp",
    "Communication_Impl.cpp",
    "Compressor.cpp",
    "DeltaAccumulationBuffer.cpp",
    "ErrorImage.cpp",
    "HookTimer.cpp",
    "FrameDebugger.cpp",
    "FrameInfo.cpp",
    "FrameProfiler.cpp",
    "FrameStatsLogger.cpp",
    "geometry.cpp",
    "GraphicsServerState.cpp",
    "HTTPRequest.cpp",
    "HUDTextureVisualization.cpp",
    "IMonitor.cpp",
    "IServerPlugin_Impl.cpp",
    "LayerManager.cpp",
    "Logger.cpp",
    "MemoryBuffer.cpp",
    "misc.cpp",
    "ModernAPIFrameDebuggerLayer.cpp",
    "ModernAPIFrameProfilerLayer.cpp",
    "ModernAPILayerManager.cpp",
    "NamedEvent.cpp",
    "NamedMutex.cpp",
    "NamedSemaphore.cpp",
    "NetSocket.cpp",
    "ObjectDatabaseProcessor.cpp",
    "parser.cpp",
    "SaveImage.cpp",
    "SessionManager.cpp",
    "SharedGlobal.cpp",
    "SharedMemory.cpp",
    "SharedMemoryManager.cpp",
    "StreamLog.cpp",
    "TimeControlLayer.cpp",
    "timer.cpp",
    "TraceAnalyzer.cpp",
    "TraceMetadata.cpp",
    "Tracing/APIEntry.cpp",
    "Tracing/MultithreadedTraceAnalyzerLayer.cpp",
    "Tracing/ThreadTraceData.cpp",
    "WrappedObjectDatabase.cpp",
    "xml.cpp",

    # Linux files
    "Linux/proc.cpp",
    "Linux/Interceptor.cpp",
    "Linux/OSWrappers.cpp",
    "Linux/SafeCRT.cpp",
    "Linux/ServerUtils.cpp",
    "Linux/timerLinux.cpp"
]

# Creating object files	
objFiles = env.SharedObject(sources)

statFiles = env.StaticLibrary(
    target = libName,
    source =objFiles)
install = statFiles

# Installing libraries
libInstall = env.Install(
    dir = env['CXL_lib_dir'],
    source = (install))
Return('libInstall')
