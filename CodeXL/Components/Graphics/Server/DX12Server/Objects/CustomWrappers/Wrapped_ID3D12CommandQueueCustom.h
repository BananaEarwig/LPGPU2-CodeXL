//=============================================================================
/// Copyright (c) 2016 Advanced Micro Devices, Inc. All rights reserved.
/// \author AMD Developer Tools Team
/// \file   Wrapped_ID3D12CommandQueueCustom.h
/// \brief  A special wrapper implementation extended from Wrapped_ID3D12CommandQueue
///         to be used for submitting GPU profiling commands.
//=============================================================================

#ifndef Wrapped_ID3D12_COMMAND_QUEUE_CUSTOM
#define Wrapped_ID3D12_COMMAND_QUEUE_CUSTOM

#include "Wrapped_ID3D12CommandQueueCustom.h"
#include "Wrapped_ID3D12GraphicsCommandListCustom.h"
#include "../BaseWrappers/Wrapped_ID3D12CommandQueue.h"
#include "../../Profiling/DX12WorkerInfo.h"
#include "../../Profiling/DX12FrameProfilerLayer.h"
#include "../../Util/DX12Utilities.h"

//-----------------------------------------------------------------------------
/// A ID3D12CommandQueue interface wrapper. This implementation provides a customizable
/// layer above the autogenerated implementation. Add specialized logic here that
/// can't easily be inserted into the output generated code.
//-----------------------------------------------------------------------------
class Wrapped_ID3D12CommandQueueCustom : public Wrapped_ID3D12CommandQueue
{
public:
    //-----------------------------------------------------------------------------
    /// A custom constructor for our wrapped ID3D12CommandQueue. Creates synchronization objects required for profiling.
    /// \param inRealCommandQueue The real runtime instance being wrapped.
    //-----------------------------------------------------------------------------
    Wrapped_ID3D12CommandQueueCustom(ID3D12CommandQueue* inRealCommandQueue);

    //-----------------------------------------------------------------------------
    /// A custom destructor for our wrapped ID3D12CommandQueue. Destroys synchronization objects.
    //-----------------------------------------------------------------------------
    virtual ~Wrapped_ID3D12CommandQueueCustom();

    //-----------------------------------------------------------------------------
    /// Check if it is possible to collect timestamps for this Queue.
    /// \returns True if it is possible to collect timestamps for this Queue.
    //-----------------------------------------------------------------------------
    bool CanTimestampQueue();

    //-----------------------------------------------------------------------------
    /// Fill a vector with all profiled command lists.
    /// \param numCommandLists The number of CommandLists to gather results for.
    /// \param ppCommandLists The array of CommandLists to gather results for.
    /// \param cmdListsWithProfiledCalls An array of CommandLists with profiled calls.
    //-----------------------------------------------------------------------------
    void GatherProfiledCommandLists(
        UINT                                                   numCommandLists,
        ID3D12CommandList* const*                              ppCommandLists,
        std::vector<Wrapped_ID3D12GraphicsCommandListCustom*>& cmdListsWithProfiledCalls);

    //-----------------------------------------------------------------------------
    /// Spawn a worker thread to gather GPU profiler results.
    /// \param pTimestampPair A pair of calibration timestamps used to align CPU and GPU timelines.
    /// \param pQueue The Queue responsible for executed the profiled workload.
    /// \param numCommandLists The number of CommandLists being profiled.
    /// \param ppCommandLists The array of CommandLists being executed.
    //-----------------------------------------------------------------------------
    void SpawnWorker(
        CalibrationTimestampPair*         pTimestampPair,
        Wrapped_ID3D12CommandQueueCustom* pQueue,
        UINT                              numCommandLists,
        ID3D12CommandList* const*         ppCommandLists);

    //-----------------------------------------------------------------------------
    /// A custom override used to track which Queue is responsible for executing CommandLists.
    /// \param NumCommandLists The number of CommandLists in the array to execute.
    /// \param ppCommandLists An array of CommandLists to execute through the Queue.
    //-----------------------------------------------------------------------------
    void STDMETHODCALLTYPE ExecuteCommandLists(UINT NumCommandLists, ID3D12CommandList* const* ppCommandLists);

    //-----------------------------------------------------------------------------
    /// Return the number of worker threads.
    /// \returns The number of worker thread.
    //-----------------------------------------------------------------------------
    UINT WorkerThreadCount() { return (UINT)m_workerThreadInfo.size(); }

    //-----------------------------------------------------------------------------
    /// Kill all info retained by this thread.
    //-----------------------------------------------------------------------------
    void EndCollection();

    //-----------------------------------------------------------------------------
    /// Get a worker handle given an index.
    /// \param inIndex The worker index to retrieve a handle to.
    /// \returns A handle to the nth worker thread.
    //-----------------------------------------------------------------------------
    HANDLE GetThreadHandle(int inIndex) { return m_workerThreadInfo[inIndex]->m_threadInfo.threadHandle; }

    //-----------------------------------------------------------------------------
    /// Get the worker info for a given worker thread by index.
    /// \param inIndex The worker index to retrieve info for.
    /// \returns The DX12WorkerInfo instance for the nth worker thread.
    //-----------------------------------------------------------------------------
    DX12WorkerInfo* GetWorkerInfo(int inIndex) { return m_workerThreadInfo[inIndex]; }

private:
    /// The Queue synchronization data for a result collection worker thread.
    QueueSyncData m_QSD;

    /// A vector of each DX12WorkerInfo instance for each result collection worker thread.
    std::vector<DX12WorkerInfo*> m_workerThreadInfo;

    /// A mutex used to serialize access to the worker thread info storage.
    mutex m_workerThreadInfoMutex;

    /// Track an ExecuteCommandLists ID.
    INT64 m_executionID;
};

#endif // Wrapped_ID3D12_COMMAND_QUEUE_CUSTOM
