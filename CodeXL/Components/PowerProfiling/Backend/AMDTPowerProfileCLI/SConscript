# -*- Python -*-

Import('*')
from CXL_init import *


appName = "CodeXLPowerProfiler-bin"

env = CXL_env.Clone()
UseBoost(env)
compiler_base_flags = "-D_LINUX -DLINUX -Wall -Werror -Wextra -g -fmessage-length=0 -Wno-unknown-pragmas -pthread -std=c++11 -DGDT_BUILD_SUFFIX="
    
if (env['CXL_build'] == 'debug'):
    compiler_base_flags += ' -D_DEBUG -D_LINUX -DBOOST_REGEX_NO_EXTERNAL_TEMPLATES'
else:
    compiler_base_flags += ' -O3 -DNDEBUG -D_LINUX -DBOOST_REGEX_NO_EXTERNAL_TEMPLATES'

if (env['CXL_build_conf'] == 'PUBLIC'):
	compiler_base_flags += ' -DGDT_PUBLIC '
elif (env['CXL_build_conf'] == 'NDA'):
	compiler_base_flags += ' -DGDT_NDA '
elif (env['CXL_build_conf'] == 'INTERNAL'):
	compiler_base_flags += ' -DGDT_INTERNAL '
else:
	compiler_base_flags += ' -DGDT_PUBLIC '
    
env.Replace(CPPFLAGS = compiler_base_flags)

env.Append( CPPPATH = [ 
	".",
	"inc",
	"src",
	"..",
	env['CXL_commonproj_dir'],
	env['CXL_commonproj_dir']+"/AMDTCommonHeaders",
	env['CXL_commonproj_dir']+"/../CommonProjects",
	env['CXL_commonproj_dir']+"/../../CodeXL/Components/PowerProfiling/Backend/AMDTPowerProfileAPI/inc",
	env['CXL_commonproj_dir']+"/../../CodeXL/Components/PowerProfiling/Backend",
	env['CXL_commonproj_dir']+"/../../CodeXL/Components/PowerProfiling/MiddleTier",
])


env.Append (LIBS = [
    'CXLOSWrappers',
    'CXLBaseTools',
    "CXLPowerProfileAPI",
    "CXLProfilerDAL",
    "CXLDbAdapter",
    "pthread",
    "libboost_filesystem",
    "libboost_wave",
    "libboost_system",
    "libboost_thread",
    "libboost_date_time",
    "libboost_chrono",
    #++KB: LPGPU2
    "libsqlite"
    #--KB: LPGPU2
])

sources = \
[
	"src/PowerProfileCLI.cpp",
	"src/ppParseArgs.cpp",
	"src/ppCollect.cpp",
	"src/ppReporter.cpp",
	"src/ppCliUtils.cpp",
]

resources = \
[
	"LinuxResources/CodeXLPowerProfiler"
]

# Creating object files	
objFiles = env.SharedObject(sources)

# Creating shared libraries
exe = env.Program(
	target = appName, 
	source = objFiles)

# Installing libraries
exeInstall = env.Install( 
	dir = env['CXL_lib_dir'], 
	source = (exe))

exeInstall += env.Install( 
	dir = env['CXL_lib_dir'], 
	source = (resources))

Return('exeInstall')
