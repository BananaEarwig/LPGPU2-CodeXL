# 
# Common file script
#

Import('GPS_env')
env = GPS_env.Clone()
env.Prepend (CPPPATH = env['BASE_PATH'])
env.Prepend (CPPPATH = ["../Common/Src"])

base_env = Environment()
base_env['CPPPATH'] = \
[
    env.CommonPath + "Common/Lib/Ext/libpng/" + env.libpng,
    env.CommonPath + "Common/Lib/Ext/jpglib/" + env.jpglib,
]

base_env['CCFLAGS'] = env['CCFLAGS']

base_env.Prepend(CCFLAGS =
[
    '-std=c99',
])

base_env.Prepend (CPPPATH = env['BASE_PATH'])

#
# build zlib
#

sources = \
[
    "adler32.c",
    "compress.c",
    "crc32.c",
    "deflate.c",
    "gzclose.c",
    "gzlib.c",
    "gzread.c",
    "gzwrite.c",
    "infback.c",
    "inffast.c",
    "inflate.c",
    "inftrees.c",
    "trees.c",
    "uncompr.c",
    "zutil.c",
]

# build the file list with the correct path prepended
src = [];
for file in sources:
    src.append(env.CommonPath + "Common/Lib/Ext/zlib/1.2.8/" + file)

zlib_Obj = base_env.StaticLibrary('Zlib', src)

#
# build the png library
#
sources = \
[
    "png.c",
    "pngerror.c",
    "pngget.c",
    "pngmem.c",
    "pngpread.c",
    "pngread.c",
    "pngrio.c",
    "pngrtran.c",
    "pngrutil.c",
    "pngset.c",
    "pngtrans.c",
    "pngwio.c",
    "pngwrite.c",
    "pngwtran.c",
    "pngwutil.c",
]

# build the file list with the correct path prepended
src = [];
for file in sources:
    src.append(env.CommonPath + "Common/Lib/Ext/libpng/" + env.libpng + "/" + file)

libPng_Obj = base_env.StaticLibrary('libPng', src)

#
# Build the JPEG library
#
sources = \
[
# library files
    "jaricom.c",
    "jcapimin.c",
    "jcapistd.c",
    "jcarith.c",
    "jccoefct.c",
    "jccolor.c",
    "jcdctmgr.c",
    "jchuff.c",
    "jcinit.c",
    "jcmainct.c",
    "jcmarker.c",
    "jcmaster.c",
    "jcomapi.c",
    "jcparam.c",
    "jcprepct.c",
    "jcsample.c",
    "jctrans.c",
    "jdapimin.c",
    "jdapistd.c",
    "jdarith.c",
    "jdatadst.c",
    "jdatasrc.c",
    "jdcoefct.c",
    "jdcolor.c",
    "jddctmgr.c",
    "jdhuff.c",
    "jdinput.c",
    "jdmainct.c",
    "jdmarker.c",
    "jdmaster.c",
    "jdmerge.c",
    "jdpostct.c",
    "jdsample.c",
    "jdtrans.c",
    "jerror.c",
    "jfdctflt.c",
    "jfdctfst.c",
    "jfdctint.c",
    "jidctflt.c",
    "jidctfst.c",
    "jidctint.c",
    "jquant1.c",
    "jquant2.c",
    "jutils.c",
    "jmemmgr.c",
    "jmemnobs.c",

# compression
#    "cjpeg.c",
#    "rdppm.c",
#    "rdgif.c",
#    "rdtarga.c",
#    "rdrle.c",
#    "rdbmp.c",
#    "rdswitch.c",

# decompression
#    "djpeg.c",
#    "wrppm.c",
#    "wrgif.c",
#    "wrtarga.c",
#    "wrrle.c",
#    "wrbmp.c",
#    "rdcolmap.c",

#    "cdjpeg.c"
]

# build the file list with the correct path prepended
src = [];
for file in sources:
    src.append(env.CommonPath + "Common/Lib/Ext/jpglib/" + env.jpglib + "/" + file)

jpgLib_Obj = base_env.StaticLibrary('libJpg', src)

libs = \
[
    "dl",
    "rt",
    "pthread",
]

env.Prepend(CCFLAGS =
[
    '-std=c++11',
])

#
# Build the DDS library
#
sources = \
[
    env.CommonPath + "Common/Src/DDS/AMDT-DDS.cpp"
]

DDS_Obj = env.StaticLibrary('DDS', sources, LIBS=libs)

#
# Build the AMDTBaseTools library
#
sources = \
[
    "src/gtIAllocationFailureObserver.cpp",
    "src/gtASCIIString.cpp",
    "src/gtASCIIStringTokenizer.cpp",
    "src/gtAssert.cpp",
    "src/gtIAssertionFailureHandler.cpp",
    "src/gtList.cpp",
    "src/gtMap.cpp",
    "src/gtSingeltonsDelete.cpp",
    "src/gtString.cpp",
    "src/gtStringTokenizer.cpp",
    "src/gtVector.cpp"
]

# build the file list with the correct path prepended
src = [];
for file in sources:
    src.append(env.CommonPath + "Common/Src/AMDTBaseTools/" + file)

BaseTools_Obj = env.StaticLibrary('AMDTBaseTools', src, LIBS=libs)

#
# Build the AMDTOSWrappers library
#
sources = \
[
    "src/osProductVersion.cpp",
    "src/common/osASCIIInputFileImpl.cpp",
    "src/common/osApplication.cpp",
    "src/common/osChannelOperators.cpp",
    "src/common/osChannel.cpp",
    "src/common/osCriticalSectionLocker.cpp",
    "src/common/osCriticalSection.cpp",
    "src/common/osCommunicationDebugManager.cpp",
    "src/common/osCommunicationDebugThread.cpp",
    "src/common/osDebugLog.cpp",
    "src/common/osDirectory.cpp",
    "src/common/osDNSQueryThread.cpp",
    "src/common/osFileImpl.cpp",
    "src/common/osFileLauncher.cpp",
    "src/common/osFileLauncherThread.cpp",
    "src/common/osFilePath.cpp",
    "src/common/osFilePathByLastAccessDateCompareFunctor.cpp",
    "src/common/osFile.cpp",
    "src/common/osGeneralFunctions.cpp",
    "src/common/osInputFileImpl.cpp",
    "src/common/osModule.cpp",
    "src/common/osMutex.cpp",
    "src/common/osOutputFileImpl.cpp",
    "src/common/osRawMemoryBuffer.cpp",
    "src/common/osRawMemoryStream.cpp",
    "src/common/osSettingsFileHandler.cpp",
    "src/common/osSocket.cpp",
    "src/common/osStream.cpp",
    "src/common/osTime.cpp",
    "src/common/osTimeInterval.cpp",
    "src/common/osTransferableObjectCreatorsBase.cpp",
    "src/common/osTransferableObjectCreatorsManager.cpp",
    "src/common/osTransferableObjectType.cpp",
    "src/common/osTransferableObject.cpp",
    "src/common/osWrappersInitFunc.cpp",
# linuxSources
    "src/linux/osCondition.cpp",
    "src/linux/osCriticalSectionImpl.cpp",
    "src/linux/osDirectory.cpp",
    "src/linux/osFile.cpp",
    "src/linux/osFileLauncher.cpp",
    "src/linux/osLinuxProcFileSystemReader.cpp",
    "src/linux/osModule.cpp",
    "src/linux/osMutexImpl.cpp",
    "src/linux/osPortAddress.cpp",
    "src/linux/osProcess.cpp",
    "src/linux/osProcessSharedFile.cpp",
    "src/linux/osStopWatch.cpp",
    "src/linux/osSystemError.cpp",
    "src/linux/osTCPSocket.cpp",
    "src/linux/osTCPSocketClient.cpp",
    "src/linux/osThread.cpp",
    "src/linux/osTime.cpp", 
    "src/linux/osInputFileImpl.cpp",
    "src/linux/osUser.cpp",
# Generic Linux 
    "src/linux/osApplication.cpp",
    "src/linux/osDebuggingFunctions.cpp",
    "src/linux/osFilePath.cpp",
    "src/linux/osGeneralFunctions.cpp",
    "src/linux/osMachine.cpp",
]

# build the file list with the correct path prepended
src = [];
for file in sources:
    src.append(env.CommonPath + "Common/Src/AMDTOSWrappers/" + file)

# add the base tools to the start of the list
libs.insert(0, env.configPath + "/libAMDTBaseTools")

OSWrappers_Obj = env.StaticLibrary('AMDTOSWrappers', src, LIBS=libs)
Depends(OSWrappers_Obj, BaseTools_Obj + DDS_Obj + zlib_Obj + jpgLib_Obj + libPng_Obj )

Return('OSWrappers_Obj')

