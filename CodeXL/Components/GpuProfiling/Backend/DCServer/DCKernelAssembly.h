//==============================================================================
// Copyright (c) 2015 Advanced Micro Devices, Inc. All rights reserved.
/// \author AMD Developer Tools Team
/// \file
/// \brief
//==============================================================================


#ifndef _DC_KERNEL_ASSEMBLY_H_
#define _DC_KERNEL_ASSEMBLY_H_

#include <map>
#include <string>
#include <windows.h>
#include <d3d11.h>
#include "D3Dcompiler.h"
#include "AMDTMutex.h"
#include "..\Common\Logger.h"

/// \defgroup DCKernelAssembly DCKernelAssembly
/// This module handles retrieving the DX assembly
///
/// \ingroup DCServer
// @{

typedef HRESULT(WINAPI
                *D3DDisassembleProc)(__in_bcount(SrcDataSize) LPCVOID pSrcData,
                                     __in SIZE_T SrcDataSize,
                                     __in UINT Flags,
                                     __in_opt LPCSTR szComments,
                                     __out ID3DBlob** ppDisassembly);

//------------------------------------------------------------------------------------
/// This class contains Kernel information
//------------------------------------------------------------------------------------
class DCKernel
{
public:

    /// Constructor
    DCKernel()
    {
        m_pAssemblyBlob = NULL;
        m_strKernelName.clear();
        m_uiGroupSizeX = 0;
        m_uiGroupSizeY = 0;
        m_uiGroupSizeZ = 0;
    }

    /// Copy Constructor
    DCKernel(const DCKernel& dck)
    {
        m_strKernelName = dck.m_strKernelName;
        m_pAssemblyBlob = dck.m_pAssemblyBlob;
        m_uiGroupSizeX = dck.m_uiGroupSizeX;
        m_uiGroupSizeY = dck.m_uiGroupSizeY;
        m_uiGroupSizeZ = dck.m_uiGroupSizeZ;
    }

    /// Assignment Operator
    DCKernel& operator=(const DCKernel& dck)
    {
        if (this != &dck)
        {
            m_strKernelName = dck.m_strKernelName;
            m_pAssemblyBlob = dck.m_pAssemblyBlob;
            m_uiGroupSizeX = dck.m_uiGroupSizeX;
            m_uiGroupSizeY = dck.m_uiGroupSizeY;
            m_uiGroupSizeZ = dck.m_uiGroupSizeZ;
        }

        return *this;
    }

public:
    std::string m_strKernelName;  ///< Kernel name
    ID3DBlob* m_pAssemblyBlob;    ///< Kernel assembly blob
    UINT m_uiGroupSizeX;          ///< Group size x, get from asm code
    UINT m_uiGroupSizeY;          ///< Group size y, get from asm code
    UINT m_uiGroupSizeZ;          ///< Group size z, get from asm code
};

typedef std::map<const void*, std::string> KernelNameMap;
typedef std::map<ID3D11ComputeShader*, DCKernel> KernelMap;

//------------------------------------------------------------------------------------
/// This class manages compute shaders
//------------------------------------------------------------------------------------
class KernelAssembly
{
public:
    /// Constructor
    KernelAssembly(void);

    /// Destructor
    ~KernelAssembly(void);

    /// Add compute shader, generate assembly for the shader and store in the Kernel map
    /// \param pCS CS pointer
    /// \param pShaderByteCode shader binary
    /// \param BytecodeLength shader binary length
    void AddComputeShader(ID3D11ComputeShader* pCS, const void* pShaderByteCode, SIZE_T BytecodeLength);

    /// Add kernel name and binary blob pair to Kernal name map
    /// \param kernelName kernel name string
    /// \param pBlob kernel binary generated by CompileShader
    void AddKernelName(std::string kernelName, ID3DBlob* pBlob);

    /// Query kernel information from CS pointer
    /// \param pCS CS pointer
    /// \param pBlob output shader assembly blob
    /// \param kernelName output shader name string
    /// \param groupSizeX Group Size X
    /// \param groupSizeY Group Size Y
    /// \param groupSizeZ Group Size Z
    void GetKernelInformation(ID3D11ComputeShader* pCS, ID3DBlob** pBlob, std::string& kernelName, UINT& groupSizeX, UINT& groupSizeY, UINT& groupSizeZ) const;

    /// Write assembly
    /// \param fileName assembly filename
    /// \param pBlob assembly blob
    void WriteAssembly(std::string fileName, ID3DBlob* pBlob);

    /// sets the flag indicating if the ASM file should be written out
    /// \param bOutputASM flag indicating if the IL file should be written out
    void SetOutputASM(bool bOutputASM)
    {
        m_bOutputASM = bOutputASM;
    }

private:
    /// Get binary shader checksum, can be used as shaderID
    /// \param pBuff shader binary
    /// \param size shader binary size
    /// \return shader binary checksum
    int GetChecksum(void* pBuff, UINT size) const;

private:
    KernelMap     kernelMap;       ///< Kernel map, map CS pointer to CS assembly information
    KernelNameMap kernelNameMap;   ///< Kernel name map, map shader binary to shader name string
    std::string   m_strFilePrefix; ///< the prefix string for the .cl/.isa/.il output files
    AMDTMutex*    m_pmutex;        ///< mutex
    bool          m_bOutputASM;    ///< flag indicating whether or not to write out the ASM file
    D3DDisassembleProc m_pD3DDisassemble; ///< Function pointer that points to D3DDisassemble
};

// @}

#endif // _DC_KERNEL_ASSEMBLY_H_
